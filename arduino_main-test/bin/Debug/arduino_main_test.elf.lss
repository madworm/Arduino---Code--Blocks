
bin/Debug/arduino_main_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000402  00000496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800102  00800102  00000498  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000070  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000b8  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ca  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000927  00000000  00000000  00000e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000345  00000000  00000000  0000177d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006c8  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000110  00000000  00000000  0000218c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002bd  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002ca  00000000  00000000  00002559  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00002823  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:



/* dont touch this: START */
extern "C" void __cxa_pure_virtual(void) {
cli();
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
		SREG = oldSREG;
	}
}

int digitalRead(uint8_t pin)
{
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_16>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

00000068 <port_to_mode_PGM>:
  68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
  7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
  9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
  ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
  be:	00 00 00 00                                         ....

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d4 e0       	ldi	r29, 0x04	; 4
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e2 e0       	ldi	r30, 0x02	; 2
  d6:	f4 e0       	ldi	r31, 0x04	; 4
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a2 30       	cpi	r26, 0x02	; 2
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	11 e0       	ldi	r17, 0x01	; 1
  e6:	a2 e0       	ldi	r26, 0x02	; 2
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	ab 30       	cpi	r26, 0x0B	; 11
  f0:	b1 07       	cpc	r27, r17
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  f8:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <loop>:
    //Serial.begin(9600);
}

void loop(void)
{
    digitalWrite(led_pin,HIGH);
 100:	80 91 00 01 	lds	r24, 0x0100
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	0e 94 f6 00 	call	0x1ec	; 0x1ec <digitalWrite>
    delay(250);
 10a:	6a ef       	ldi	r22, 0xFA	; 250
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 9d 01 	call	0x33a	; 0x33a <delay>
    digitalWrite(led_pin,LOW);
 116:	80 91 00 01 	lds	r24, 0x0100
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <digitalWrite>
    delay(250);
 120:	6a ef       	ldi	r22, 0xFA	; 250
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 9d 01 	call	0x33a	; 0x33a <delay>
    //Serial.println("test");
}
 12c:	08 95       	ret

0000012e <setup>:
uint8_t led_pin = 13;


void setup(void)
{
    pinMode(led_pin,OUTPUT);
 12e:	80 91 00 01 	lds	r24, 0x0100
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	0e 94 a4 00 	call	0x148	; 0x148 <pinMode>
    //Serial.begin(9600);
}
 138:	08 95       	ret

0000013a <main>:
for (;;);
}

int main(void)
{
	init();
 13a:	0e 94 c4 01 	call	0x388	; 0x388 <init>

	setup();
 13e:	0e 94 97 00 	call	0x12e	; 0x12e <setup>

	for (;;)
		loop();
 142:	0e 94 80 00 	call	0x100	; 0x100 <loop>
 146:	fd cf       	rjmp	.-6      	; 0x142 <main+0x8>

00000148 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 148:	28 2f       	mov	r18, r24
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	c9 01       	movw	r24, r18
 14e:	86 56       	subi	r24, 0x66	; 102
 150:	9f 4f       	sbci	r25, 0xFF	; 255
 152:	fc 01       	movw	r30, r24
 154:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
 156:	f9 01       	movw	r30, r18
 158:	ea 57       	subi	r30, 0x7A	; 122
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
 15e:	ee 23       	and	r30, r30
 160:	b9 f0       	breq	.+46     	; 0x190 <pinMode+0x48>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	e8 59       	subi	r30, 0x98	; 152
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	a5 91       	lpm	r26, Z+
 16e:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
 170:	66 23       	and	r22, r22
 172:	41 f4       	brne	.+16     	; 0x184 <pinMode+0x3c>
		uint8_t oldSREG = SREG;
 174:	2f b7       	in	r18, 0x3f	; 63
                cli();
 176:	f8 94       	cli
		*reg &= ~bit;
 178:	8c 91       	ld	r24, X
 17a:	90 95       	com	r25
 17c:	89 23       	and	r24, r25
 17e:	8c 93       	st	X, r24
		SREG = oldSREG;
 180:	2f bf       	out	0x3f, r18	; 63
 182:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
 184:	2f b7       	in	r18, 0x3f	; 63
                cli();
 186:	f8 94       	cli
		*reg |= bit;
 188:	8c 91       	ld	r24, X
 18a:	89 2b       	or	r24, r25
 18c:	8c 93       	st	X, r24
		SREG = oldSREG;
 18e:	2f bf       	out	0x3f, r18	; 63
 190:	08 95       	ret

00000192 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	71 f0       	breq	.+28     	; 0x1b2 <turnOffPWM+0x20>
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	28 f4       	brcc	.+10     	; 0x1a4 <turnOffPWM+0x12>
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	a1 f0       	breq	.+40     	; 0x1c6 <turnOffPWM+0x34>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	21 f5       	brne	.+72     	; 0x1ea <turnOffPWM+0x58>
 1a2:	14 c0       	rjmp	.+40     	; 0x1cc <turnOffPWM+0x3a>
 1a4:	86 30       	cpi	r24, 0x06	; 6
 1a6:	b1 f0       	breq	.+44     	; 0x1d4 <turnOffPWM+0x42>
 1a8:	87 30       	cpi	r24, 0x07	; 7
 1aa:	d1 f0       	breq	.+52     	; 0x1e0 <turnOffPWM+0x4e>
 1ac:	84 30       	cpi	r24, 0x04	; 4
 1ae:	e9 f4       	brne	.+58     	; 0x1ea <turnOffPWM+0x58>
 1b0:	04 c0       	rjmp	.+8      	; 0x1ba <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 1b2:	80 91 80 00 	lds	r24, 0x0080
 1b6:	8f 77       	andi	r24, 0x7F	; 127
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1ba:	80 91 80 00 	lds	r24, 0x0080
 1be:	8f 7d       	andi	r24, 0xDF	; 223
 1c0:	80 93 80 00 	sts	0x0080, r24
 1c4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 1c6:	84 b5       	in	r24, 0x24	; 36
 1c8:	8f 77       	andi	r24, 0x7F	; 127
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1cc:	84 b5       	in	r24, 0x24	; 36
 1ce:	8f 7d       	andi	r24, 0xDF	; 223
 1d0:	84 bd       	out	0x24, r24	; 36
 1d2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 1d4:	80 91 b0 00 	lds	r24, 0x00B0
 1d8:	8f 77       	andi	r24, 0x7F	; 127
 1da:	80 93 b0 00 	sts	0x00B0, r24
 1de:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 1e0:	80 91 b0 00 	lds	r24, 0x00B0
 1e4:	8f 7d       	andi	r24, 0xDF	; 223
 1e6:	80 93 b0 00 	sts	0x00B0, r24
 1ea:	08 95       	ret

000001ec <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	df 93       	push	r29
 1f2:	cf 93       	push	r28
 1f4:	0f 92       	push	r0
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
 1fa:	28 2f       	mov	r18, r24
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	f9 01       	movw	r30, r18
 200:	e2 55       	subi	r30, 0x52	; 82
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 206:	f9 01       	movw	r30, r18
 208:	e6 56       	subi	r30, 0x66	; 102
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
 20e:	2a 57       	subi	r18, 0x7A	; 122
 210:	3f 4f       	sbci	r19, 0xFF	; 255
 212:	f9 01       	movw	r30, r18
 214:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 216:	00 23       	and	r16, r16
 218:	e1 f0       	breq	.+56     	; 0x252 <digitalWrite+0x66>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 21a:	88 23       	and	r24, r24
 21c:	21 f0       	breq	.+8      	; 0x226 <digitalWrite+0x3a>
 21e:	69 83       	std	Y+1, r22	; 0x01
 220:	0e 94 c9 00 	call	0x192	; 0x192 <turnOffPWM>
 224:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
 226:	e0 2f       	mov	r30, r16
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	ee 58       	subi	r30, 0x8E	; 142
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	a5 91       	lpm	r26, Z+
 234:	b4 91       	lpm	r27, Z+

	if (val == LOW) {
 236:	66 23       	and	r22, r22
 238:	31 f4       	brne	.+12     	; 0x246 <digitalWrite+0x5a>
		uint8_t oldSREG = SREG;
 23a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 23c:	f8 94       	cli
		*out &= ~bit;
 23e:	8c 91       	ld	r24, X
 240:	10 95       	com	r17
 242:	81 23       	and	r24, r17
 244:	04 c0       	rjmp	.+8      	; 0x24e <digitalWrite+0x62>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 246:	9f b7       	in	r25, 0x3f	; 63
                cli();
 248:	f8 94       	cli
		*out |= bit;
 24a:	8c 91       	ld	r24, X
 24c:	81 2b       	or	r24, r17
 24e:	8c 93       	st	X, r24
		SREG = oldSREG;
 250:	9f bf       	out	0x3f, r25	; 63
	}
}
 252:	0f 90       	pop	r0
 254:	cf 91       	pop	r28
 256:	df 91       	pop	r29
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <__vector_16>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	3f 93       	push	r19
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	af 93       	push	r26
 272:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 274:	80 91 06 01 	lds	r24, 0x0106
 278:	90 91 07 01 	lds	r25, 0x0107
 27c:	a0 91 08 01 	lds	r26, 0x0108
 280:	b0 91 09 01 	lds	r27, 0x0109
	unsigned char f = timer0_fract;
 284:	30 91 0a 01 	lds	r19, 0x010A

	m += MILLIS_INC;
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	a1 1d       	adc	r26, r1
 28c:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 28e:	23 2f       	mov	r18, r19
 290:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 292:	2d 37       	cpi	r18, 0x7D	; 125
 294:	20 f0       	brcs	.+8      	; 0x29e <__vector_16+0x40>
		f -= FRACT_MAX;
 296:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	a1 1d       	adc	r26, r1
 29c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 29e:	20 93 0a 01 	sts	0x010A, r18
	timer0_millis = m;
 2a2:	80 93 06 01 	sts	0x0106, r24
 2a6:	90 93 07 01 	sts	0x0107, r25
 2aa:	a0 93 08 01 	sts	0x0108, r26
 2ae:	b0 93 09 01 	sts	0x0109, r27
	timer0_overflow_count++;
 2b2:	80 91 02 01 	lds	r24, 0x0102
 2b6:	90 91 03 01 	lds	r25, 0x0103
 2ba:	a0 91 04 01 	lds	r26, 0x0104
 2be:	b0 91 05 01 	lds	r27, 0x0105
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	a1 1d       	adc	r26, r1
 2c6:	b1 1d       	adc	r27, r1
 2c8:	80 93 02 01 	sts	0x0102, r24
 2cc:	90 93 03 01 	sts	0x0103, r25
 2d0:	a0 93 04 01 	sts	0x0104, r26
 2d4:	b0 93 05 01 	sts	0x0105, r27
}
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 2ee:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
 2f0:	f8 94       	cli
	m = timer0_overflow_count;
 2f2:	20 91 02 01 	lds	r18, 0x0102
 2f6:	30 91 03 01 	lds	r19, 0x0103
 2fa:	40 91 04 01 	lds	r20, 0x0104
 2fe:	50 91 05 01 	lds	r21, 0x0105
#if defined(TCNT0)
	t = TCNT0;
 302:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 304:	a8 9b       	sbis	0x15, 0	; 21
 306:	06 c0       	rjmp	.+12     	; 0x314 <micros+0x26>
 308:	8f 3f       	cpi	r24, 0xFF	; 255
 30a:	21 f0       	breq	.+8      	; 0x314 <micros+0x26>
		m++;
 30c:	2f 5f       	subi	r18, 0xFF	; 255
 30e:	3f 4f       	sbci	r19, 0xFF	; 255
 310:	4f 4f       	sbci	r20, 0xFF	; 255
 312:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 314:	9f bf       	out	0x3f, r25	; 63
 316:	54 2f       	mov	r21, r20
 318:	43 2f       	mov	r20, r19
 31a:	32 2f       	mov	r19, r18
 31c:	22 27       	eor	r18, r18
 31e:	28 0f       	add	r18, r24
 320:	31 1d       	adc	r19, r1
 322:	41 1d       	adc	r20, r1
 324:	51 1d       	adc	r21, r1
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	44 1f       	adc	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	8a 95       	dec	r24
 332:	d1 f7       	brne	.-12     	; 0x328 <micros+0x3a>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
 334:	b9 01       	movw	r22, r18
 336:	ca 01       	movw	r24, r20
 338:	08 95       	ret

0000033a <delay>:

void delay(unsigned long ms)
{
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	7b 01       	movw	r14, r22
 348:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
 34a:	0e 94 77 01 	call	0x2ee	; 0x2ee <micros>
 34e:	eb 01       	movw	r28, r22

	while (ms > 0) {
 350:	0f c0       	rjmp	.+30     	; 0x370 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
 352:	0e 94 77 01 	call	0x2ee	; 0x2ee <micros>
 356:	6c 1b       	sub	r22, r28
 358:	7d 0b       	sbc	r23, r29
 35a:	83 e0       	ldi	r24, 0x03	; 3
 35c:	68 3e       	cpi	r22, 0xE8	; 232
 35e:	78 07       	cpc	r23, r24
 360:	c0 f3       	brcs	.-16     	; 0x352 <delay+0x18>
			ms--;
 362:	08 94       	sec
 364:	e1 08       	sbc	r14, r1
 366:	f1 08       	sbc	r15, r1
 368:	01 09       	sbc	r16, r1
 36a:	11 09       	sbc	r17, r1
			start += 1000;
 36c:	c8 51       	subi	r28, 0x18	; 24
 36e:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 370:	e1 14       	cp	r14, r1
 372:	f1 04       	cpc	r15, r1
 374:	01 05       	cpc	r16, r1
 376:	11 05       	cpc	r17, r1
 378:	61 f7       	brne	.-40     	; 0x352 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	08 95       	ret

00000388 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 388:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 38a:	84 b5       	in	r24, 0x24	; 36
 38c:	82 60       	ori	r24, 0x02	; 2
 38e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 390:	84 b5       	in	r24, 0x24	; 36
 392:	81 60       	ori	r24, 0x01	; 1
 394:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 396:	85 b5       	in	r24, 0x25	; 37
 398:	82 60       	ori	r24, 0x02	; 2
 39a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 39c:	85 b5       	in	r24, 0x25	; 37
 39e:	81 60       	ori	r24, 0x01	; 1
 3a0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 3a2:	ee e6       	ldi	r30, 0x6E	; 110
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	81 60       	ori	r24, 0x01	; 1
 3aa:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
 3ac:	e1 e8       	ldi	r30, 0x81	; 129
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
 3b2:	80 81       	ld	r24, Z
 3b4:	82 60       	ori	r24, 0x02	; 2
 3b6:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
 3b8:	80 81       	ld	r24, Z
 3ba:	81 60       	ori	r24, 0x01	; 1
 3bc:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 3be:	e0 e8       	ldi	r30, 0x80	; 128
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	81 60       	ori	r24, 0x01	; 1
 3c6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3c8:	e1 eb       	ldi	r30, 0xB1	; 177
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	84 60       	ori	r24, 0x04	; 4
 3d0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3d2:	e0 eb       	ldi	r30, 0xB0	; 176
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 3dc:	ea e7       	ldi	r30, 0x7A	; 122
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	84 60       	ori	r24, 0x04	; 4
 3e4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 3e6:	80 81       	ld	r24, Z
 3e8:	82 60       	ori	r24, 0x02	; 2
 3ea:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 3ec:	80 81       	ld	r24, Z
 3ee:	81 60       	ori	r24, 0x01	; 1
 3f0:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 3f2:	80 81       	ld	r24, Z
 3f4:	80 68       	ori	r24, 0x80	; 128
 3f6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 3f8:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 3fc:	08 95       	ret

000003fe <_exit>:
 3fe:	f8 94       	cli

00000400 <__stop_program>:
 400:	ff cf       	rjmp	.-2      	; 0x400 <__stop_program>
